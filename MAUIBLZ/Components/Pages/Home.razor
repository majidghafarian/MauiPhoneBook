@page "/"
@using MAUIBLZ.Service
@inject SignalRService SignalRService

<h3 class="text-2xl font-bold text-blue-600 mb-4">📖 دفترچه تلفن</h3>

<input type="text"
       @bind="SearchQuery"
       @bind:event="oninput"
       placeholder="جستجو کنید..."
       class="w-full p-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-400 shadow-sm" />

<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mt-4">
    @foreach (var contact in SignalRService.PhoneBookResults)
    {
        <div class="bg-white p-4 rounded-lg shadow-md border border-gray-200">
            <p class="text-gray-500 text-sm">ID: @contact.Id</p>
            <h4 class="text-lg font-semibold text-gray-800">@contact.Name</h4>
            <p class="text-blue-500 font-medium">@contact.PhoneNumber</p>
        </div>
    }
</div>


@code {
    private Timer _typingDelayTimer;
    private string _searchQuery;

    private string SearchQuery
    {
        get => _searchQuery;
        set
        {
            _searchQuery = value;
            OnSearchTextChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await SignalRService.ConnectAsync();
        SignalRService.OnPhoneBookResultsChanged += async () => await InvokeAsync(StateHasChanged);
    }

    private async Task OnSearchTextChanged()
    {
        if (!SignalRService.IsConnected)
        {
            return; // اگر اتصال برقرار نشده، کاری نکن
        }

        _typingDelayTimer?.Dispose();

        if (string.IsNullOrWhiteSpace(_searchQuery))
        {
            SignalRService.PhoneBookResults.Clear();
            await InvokeAsync(StateHasChanged); // ✅ تغییر وضعیت UI در Dispatcher
        }
        else
        {
            _typingDelayTimer = new Timer(async _ =>
            {
                await SignalRService.SearchPhoneBookAsync(_searchQuery);
                await InvokeAsync(StateHasChanged); // ✅ اجرای امن برای تغییر UI
            }, null, 75, Timeout.Infinite);
        }
    }
}